{"version":3,"sources":["code.js","components/Weather.js","components/Feature.js","App.js","reportWebVitals.js","index.js"],"names":["obtainTimeFromCity","localDt","offset","d","Date","localTime","getTime","localOffset","getTimezoneOffset","removeAlert","document","getElementById","style","display","Weather","weatherData","iconUrl","process","weather","icon","cityTime","dt","timezone","className","toLocaleTimeString","name","sys","country","moment","format","main","Math","round","temp","src","alt","description","Feature","sunriseTime","sunrise","sunsetTime","sunset","id","onClick","x","btn","textContent","clouds","all","feels_like","humidity","wind","speed","toFixed","App","initLocation","localStorage","getItem","useState","apiData","setApiData","inputState","setInputState","apiKey","url","apiUrl","setApiUrl","initHistory","split","cityHistory","setCityHistory","useEffect","getLocationWeather","a","fetch","result","status","json","success","data","error","statusText","message","getWeather","inputEle","getElementsByClassName","value","removeItem","setItem","handle","setInterval","clearInterval","type","placeholder","onChange","event","target","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","length","map","city","i","console","log","slice","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.88832e86.chunk.js","sourcesContent":["export const obtainTimeFromCity = (localDt, offset) => {\r\n  const d = new Date(localDt * 1000);\r\n  const localTime = d.getTime();\r\n  const localOffset = d.getTimezoneOffset() * 60000;\r\n  const utc = localTime + localOffset;\r\n  var atlanta = utc + 1000 * offset;\r\n  return new Date(atlanta);\r\n};\r\n\r\nexport const removeAlert = () => {\r\n  document.getElementById(\"alert\").style.display = \"none\";\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { obtainTimeFromCity } from \"../code\";\r\n\r\nfunction Weather({ weatherData }) {\r\n  const iconUrl =\r\n    process.env.REACT_APP_ICON_URL + `${weatherData.weather[0].icon}@2x.png`;\r\n  const cityTime = obtainTimeFromCity(weatherData.dt, weatherData.timezone);\r\n  return (\r\n    <>\r\n      <article className=\"container\">\r\n        <div className=\"weatherData\">\r\n          <h3 className=\"citytime\">{cityTime.toLocaleTimeString(\"en-IN\")}</h3>\r\n          <h3 className=\"city\">\r\n            {weatherData.name + \", \" + weatherData.sys.country}\r\n          </h3>\r\n        </div>\r\n        <div className=\"date\">\r\n          {/* Current time */}\r\n          <h5 className=\"day\">{moment(cityTime).format(\"D\")}</h5>\r\n          <h4 className=\"month\">{moment(cityTime).format(\"MMMM\")}</h4>\r\n        </div>\r\n        <div className=\"weatherIcon\">\r\n          <span className=\"temperature\">\r\n            {weatherData.main ? Math.round(weatherData.main.temp) : \"N/A\"}\r\n          </span>\r\n          <img\r\n            src={iconUrl}\r\n            alt=\"weather status icon\"\r\n            className=\"weather-icon\"\r\n          />\r\n          <h2 className=\"description\">\r\n            {weatherData.weather ? weatherData.weather[0].description : \"N/A\"}\r\n          </h2>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { obtainTimeFromCity } from \"../code\";\r\n\r\nfunction Feature({ weatherData }) {\r\n  const displayMore = () => {\r\n    var x = document.getElementById(\"more\");\r\n    var btn = document.getElementById(\"btnMore\");\r\n    if (x.style.display === \"block\") {\r\n      x.style.display = \"none\";\r\n      btn.textContent = \"I want to know more ▼\";\r\n    } else {\r\n      x.style.display = \"block\";\r\n      btn.textContent = \"Hide info ▲\";\r\n    }\r\n  };\r\n  const sunriseTime = obtainTimeFromCity(\r\n    weatherData.sys.sunrise,\r\n    weatherData.timezone\r\n  );\r\n  const sunsetTime = obtainTimeFromCity(\r\n    weatherData.sys.sunset,\r\n    weatherData.timezone\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"extra-info\">\r\n        <button id=\"btnMore\" onClick={displayMore}>\r\n          I want to know more ▼\r\n        </button>\r\n      </div>\r\n      <div className=\"container more row\" id=\"more\">\r\n        <div className=\"col\">\r\n          <ul className=\"weather\">\r\n            <li>\r\n              <i className=\"fas fa-cloud\"></i>\r\n              Cloudines:{\" \"}\r\n              <span>{weatherData.clouds ? weatherData.clouds.all : \"N/A\"}</span>\r\n              %\r\n            </li>\r\n            <li>\r\n              <i className=\"fas fa-thermometer-half\"></i>\r\n              Feels like:{\" \"}\r\n              <span>\r\n                {weatherData.main\r\n                  ? Math.round(weatherData.main.feels_like)\r\n                  : \"N/A\"}\r\n              </span>\r\n              &deg;C\r\n            </li>\r\n            <li>\r\n              <i className=\"fas fa-tint\"></i>\r\n              Humidity:{\" \"}\r\n              <span>\r\n                {weatherData.main\r\n                  ? Math.round(weatherData.main.humidity)\r\n                  : \"N/A\"}\r\n              </span>\r\n              %\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"col\">\r\n          <ul className=\"weather\">\r\n            <li>\r\n              <i className=\"fas fa-wind\"></i>\r\n              Wind:{\" \"}\r\n              <span>\r\n                {weatherData.wind ? weatherData.wind.speed.toFixed(2) : \"N/A\"}\r\n              </span>\r\n              m/s\r\n            </li>\r\n            <li>\r\n              <i className=\"far fa-sun\"></i>\r\n              Sunrise: <span>{sunriseTime.toLocaleTimeString(\"en-IN\")}</span>\r\n            </li>\r\n            <li>\r\n              <i className=\"fas fa-sun\"></i>\r\n              Sunset: <span>{sunsetTime.toLocaleTimeString(\"en-IN\")}</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Feature;\r\n","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport Weather from \"./components/Weather\";\r\nimport Feature from \"./components/Feature\";\r\nimport { removeAlert } from \"./code\";\r\n\r\nfunction App() {\r\n  let initLocation = \"taipei\";\r\n  if (localStorage.getItem(\"location\") !== null) {\r\n    initLocation = localStorage.getItem(\"location\");\r\n  }\r\n  // State\r\n  const [apiData, setApiData] = useState({}); // to store the response\r\n  const [inputState, setInputState] = useState(initLocation); // to store the location name from input field\r\n\r\n  // API KEY AND URL\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n  const url = process.env.REACT_APP_API_URL;\r\n  const [apiUrl, setApiUrl] = useState(\r\n    `${url}/weather?q=${initLocation}&appid=${apiKey}&exclude=current&units=metric`\r\n  );\r\n  var initHistory = [];\r\n  if (localStorage.getItem(\"history\") !== null) {\r\n    initHistory = localStorage.getItem(\"history\").split(\",\");\r\n  }\r\n  const [cityHistory, setCityHistory] = useState(initHistory);\r\n\r\n  const inputHandler = (event) => {\r\n    setInputState(event.target.value);\r\n  };\r\n  // to copy the state from inputState to state\r\n  const submitHandler = () => {\r\n    setApiUrl(\r\n      `${url}/weather?q=${inputState}&appid=${apiKey}&exclude=current&units=metric`\r\n    );\r\n\r\n    setInputState(\"\");\r\n  };\r\n\r\n  const currentLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      let lat = position.coords.latitude;\r\n      let long = position.coords.longitude;\r\n      setApiUrl(\r\n        `${url}/weather?lat=${lat}&lon=${long}&appid=${apiKey}&exclude=current&units=metric`\r\n      );\r\n    });\r\n  };\r\n\r\n  const onSetHistory = (city) => {\r\n    console.log(cityHistory);\r\n    setCityHistory(cityHistory.slice(-4).concat(city));\r\n    // Store\r\n    if (localStorage.getItem(\"history\") === null) {\r\n      localStorage.setItem(\"history\", cityHistory.slice(-4).concat(city));\r\n    } else {\r\n      localStorage.removeItem(\"history\");\r\n      localStorage.setItem(\"history\", cityHistory.slice(-4).concat(city));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // To get the weather for a particular location\r\n    async function getLocationWeather() {\r\n      try {\r\n        const result = await fetch(apiUrl);\r\n\r\n        // the API call has succeeded\r\n        switch (result.status) {\r\n          case 200:\r\n            return { success: true, data: await result.json() };\r\n          case 401:\r\n            return {\r\n              success: false,\r\n              error: \"Your API key is not activated\",\r\n            };\r\n          case 404:\r\n            return {\r\n              success: false,\r\n              error: \"Your searched a wrong city name\",\r\n            };\r\n          case 429:\r\n            return {\r\n              success: false,\r\n              error:\r\n                \"Please consider upgrading to a subscription plan that meets your needs or reduce the number of API calls in accordance with the limits. (less than 60 API calls per minute)\",\r\n            };\r\n          default:\r\n            return { success: false, error: result.statusText };\r\n        }\r\n      } catch (ex) {\r\n        return { success: false, error: ex.message };\r\n      }\r\n    }\r\n    // Retrieving the Data\r\n    const getWeather = async () => {\r\n      const result = await getLocationWeather();\r\n      setApiData((data) => result);\r\n      var inputEle = document.getElementsByClassName(\"searchbar\")[0];\r\n      if (result.success) {\r\n        inputEle.value = result.data.name; //city\r\n        // Store\r\n        if (localStorage.getItem(\"location\") === null) {\r\n          localStorage.setItem(\"location\", result.data.name);\r\n        } else {\r\n          localStorage.removeItem(\"location\");\r\n          localStorage.setItem(\"location\", result.data.name);\r\n        }\r\n      } else {\r\n        inputEle.value = \"\";\r\n      }\r\n    };\r\n    getWeather();\r\n    // make the weather to be updated every 2 minutes\r\n    var handle = setInterval(getWeather, 200000);\r\n\r\n    return () => {\r\n      clearInterval(handle);\r\n    };\r\n  }, [apiUrl]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <div>\r\n          <input\r\n            type=\"search\"\r\n            className=\"searchbar transparent\"\r\n            placeholder=\"Enter City...\"\r\n            value={inputState}\r\n            onChange={inputHandler}\r\n          />\r\n          <i className=\"fas fa-map-marker-alt\" onClick={currentLocation}></i>\r\n          <button className=\"search-btn transparent\" onClick={submitHandler}>\r\n            GO\r\n          </button>\r\n        </div>\r\n        {apiData.success ? (\r\n          <div className=\"content\">\r\n            <div className=\"ListContainer\">\r\n              <i\r\n                className=\"fas fa-history\"\r\n                onClick={() => {\r\n                  var x = document.getElementById(\"history\");\r\n                  if (x.style.display === \"flex\") {\r\n                    x.style.display = \"none\";\r\n                  } else {\r\n                    x.style.display = \"flex\";\r\n                  }\r\n                }}\r\n              ></i>\r\n              <div id=\"history\">\r\n                {cityHistory.length > 0 ? (\r\n                  cityHistory.map((city, i) => (\r\n                    <div\r\n                      key={i}\r\n                      className=\"List\"\r\n                      onClick={() =>\r\n                        setApiUrl(\r\n                          `${url}/weather?q=${city}&appid=${apiKey}&exclude=current&units=metric`\r\n                        )\r\n                      }\r\n                    >\r\n                      {city}\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"noneHistory\">No History</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <Weather weatherData={apiData.data}></Weather>\r\n            <Feature weatherData={apiData.data}></Feature>\r\n\r\n            <button\r\n              className=\"addList\"\r\n              onClick={() => onSetHistory(apiData.data.name)}\r\n            >\r\n              +\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"content alert\" id=\"alert\">\r\n            <span className=\"closebtn\" onClick={removeAlert}>\r\n              &times;\r\n            </span>\r\n            <i className=\"fas fa-exclamation-circle\"></i> {apiData.error}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <footer>\r\n        <small>\r\n          <div>last updated: {moment().format(\"D MMMM YYYY h:mm:ss a\")}</div>\r\n          <div>created by Ying-Chieh Chen</div>\r\n        </small>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}